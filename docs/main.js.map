{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/data.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,wBAAwB,mBAAmB,GAAG,G;;;;;;;;;;;ACA9C,+LAA+L,SAAS,8zBAA8zB,KAAK,sEAAsE,aAAa,8C;;;;;;;;;;;;;;;;;;;;;;;;;ACA9iC;AACL;AAQ3C;IASE,sBAAoB,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;QARxC,UAAK,GAAG,4BAA4B,CAAC;QACrC,aAAQ,GAAG,EAAE,CAAC;QACd,aAAQ,GAAG,EAAE,CAAC;IAOd,CAAC;IAED,+BAAQ,GAAR;QACE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;IACvC,CAAC;IAGD,4BAAK,GAAL;QAAA,iBAQC;QAPC,UAAU,CAAC;YACT,EAAE,CAAC,CAAC,KAAI,CAAC,QAAQ,KAAK,OAAO,IAAI,KAAI,CAAC,QAAQ,KAAK,WAAW,CAAC,CAAC,CAAC;gBAC/D,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACvB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACrB,CAAC;QACH,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC;IAzBU,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAU6B,yDAAW;OAT7B,YAAY,CA+BxB;IAAD,mBAAC;CAAA;AA/BwB;;;;;;;;;;;;;;;;;;;;;;;;;;ACTiC;AACjB;AACE;AACA;AACI;AAa/C;IAAA;IAAyB,CAAC;IAAb,SAAS;QAXrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,0DAAW;aACZ;YACD,SAAS,EAAE,CAAC,yDAAW,CAAC;YACxB,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBqB;AACP;AACG;AAGvC,IAAM,QAAQ,GAAG,mBAAO,CAAC,gDAAiB,CAAC,CAAC;AAG5C;IAEE;IAAgB,CAAC;IAEjB,2BAAK,GAAL;QACI,MAAM,CAAC,+CAAE,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,4DAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1C,CAAC;IANU,WAAW;QADvB,gEAAU,EAAE;;OACA,WAAW,CAOvB;IAAD,kBAAC;CAAA;AAPuB;;;;;;;;;;;;;;;;;;;;;;;;;ACRxB;AAAA,mFAAmF;AACnF,8FAA8F;AAC9F,yEAAyE;AACzE,gFAAgF;AAEzE,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;ACfpB;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"span {\\n  display: block;\\n}\\n\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align:center\\\">\\n  <h1 data-hook=\\\"header\\\" class=\\\"header-large\\\">\\n    Welcome to {{ title }}!\\n  </h1>\\n\\n  <div *ngIf=\\\"!loggedIn\\\">\\n    <input type=\\\"text\\\" [(ngModel)]=\\\"username\\\" data-hook=\\\"username\\\">\\n    <input type=\\\"password\\\" [(ngModel)]=\\\"password\\\" data-hook=\\\"password\\\">\\n    <button (click)=\\\"login()\\\">Login</button>\\n  </div>\\n  <div *ngIf=\\\"denied\\\">\\n    <span data-hook=\\\"login-denied\\\" class=\\\"message--error\\\">That username or password are incorrect</span>\\n  </div>\\n  <div *ngIf=\\\"loggedIn\\\">\\n    <span data-hook=\\\"logged-in-message\\\" class=\\\"message\\\">You are logged in</span>\\n\\n    <select class=\\\"dropdown--enabled form-element\\\" data-hook=\\\"dropdown\\\" [(ngModel)]=\\\"pet\\\">\\n      <option value=\\\"Parrot\\\">Parrot</option>\\n      <option value=\\\"Spider\\\">Spider</option>\\n      <option value=\\\"Goldfish\\\">Goldfish</option>\\n    </select>\\n\\n    <span *ngIf=\\\"pet\\\">You would like to own a {{pet}}</span>\\n\\n    <div *ngIf=\\\"response | async as res\\\">\\n      <span>{{res.message}}</span>\\n    </div>\\n  </div>\\n</div>\\n\\n\\n\\n\"","import {Component, OnInit} from '@angular/core';\nimport {DataService} from './data.service';\nimport {Observable} from 'rxjs';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'My QA Automation Test Site';\n  username = \"\";\n  password = \"\";\n  loggedIn: boolean;\n  denied: boolean;\n  pet: string;\n  response: Observable<any>;\n\n  constructor(private service: DataService) {\n  }\n\n  ngOnInit(): void {\n    this.response = this.service.fetch();\n  }\n\n\n  login() {\n    setTimeout(() => {\n      if (this.username === 'user1' && this.password === 'password1') {\n        this.loggedIn = true;\n      } else {\n        this.denied = true;\n      }\n    }, 1500);\n  }\n\n\n\n\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {DataService} from \"./data.service\";\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [DataService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\ndeclare function require(name: string);\nconst mockData = require('./mockData.json');\n\n@Injectable()\nexport class DataService {\n\n  constructor() { }\n\n  fetch() {\n      return of(mockData).pipe(delay(3000));\n  }\n}\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}